---
apiVersion: kuttl.dev/v1beta1
kind: TestStep
commands:
  - script: |
      kubectl apply -n $NAMESPACE -f - <<EOF
      ---
      apiVersion: secrets.stackable.tech/v1alpha1
      kind: SecretClass
      metadata:
        name: kerberos-$NAMESPACE
      spec:
        backend:
          kerberosKeytab:
{% if test_scenario['values']['kerberos-backend'] == 'mit' %}
            realmName: {{ test_scenario['values']['kerberos-realm'] }}
            kdc: krb5-kdc.$NAMESPACE.svc.cluster.local
{% elif test_scenario['values']['kerberos-backend'] == 'activeDirectory' %}
            realmName: SBLE.TEST
            # Must be the FQDN of the AD domain controller
            kdc: sble-adds1.sble.test
{% endif %}
            admin:
              {{ test_scenario['values']['kerberos-backend'] }}:
{% if test_scenario['values']['kerberos-backend'] == 'mit' %}
                adminServer: krb5-kdc.$NAMESPACE.svc.cluster.local
{% elif test_scenario['values']['kerberos-backend'] == 'activeDirectory' %}
                # Must be the FQDN of the AD domain controller
                ldapServer: sble-adds1.sble.test
                passwordCacheSecret:
                  name: secret-operator-ad-passwords
                  namespace: $NAMESPACE
                # Container must be created manually
                # Users must be deleted by user between each test run
                userDistinguishedName: CN=Stackable,CN=Users,DC=sble,DC=test
                schemaDistinguishedName: CN=Schema,CN=Configuration,DC=sble,DC=test
{% endif %}
            adminKeytabSecret:
              namespace: $NAMESPACE
              name: secret-operator-keytab
            adminPrincipal: stackable-secret-operator
      EOF
---
apiVersion: v1
kind: Secret
metadata:
  name: secret-operator-keytab
data:
{% if test_scenario['values']['kerberos-backend'] == 'mit' %}
  # To create keytab
  # # when promted enter password asdf
  # cat | ktutil << 'EOF'
  # list
  # add_entry -password -p stackable-secret-operator@CLUSTER.LOCAL -k 1 -e aes256-cts-hmac-sha384-192
  # wkt /tmp/keytab
  # EOF
{% if test_scenario['values']['kerberos-realm'] == 'CLUSTER.LOCAL' %}
  keytab: BQIAAABdAAEADUNMVVNURVIuTE9DQUwAGXN0YWNrYWJsZS1zZWNyZXQtb3BlcmF0b3IAAAABZAYWIgEAFAAgm8MCZ8B//XF1tH92GciD6/usWUNAmBTZnZQxLua2TkgAAAAB
{% elif test_scenario['values']['kerberos-realm'] == 'PROD.MYCORP' %}
  keytab: BQIAAABbAAEAC1BST0QuTVlDT1JQABlzdGFja2FibGUtc2VjcmV0LW9wZXJhdG9yAAAAAWQZa0EBABQAIC/EnFNejq/K5lX6tX+B3/tkI13TCzkPB7d2ggCIEzE8AAAAAQ==
{% endif %}
{% elif test_scenario['values']['kerberos-backend'] == 'activeDirectory' %}
  # To create keytab
  # ktpass /princ foobar@SBLE.TEST /mapuser foobar@SBLE.TEST /ptype KRB5_NT_PRINCIPAL /crypto AES256-SHA1 /out foo.kt +rndPass
  keytab: BQIAAABVAAEACVNCTEUuVEVTVAAZc3RhY2thYmxlLXNlY3JldC1vcGVyYXRvcgAAAAEAAAAAAwASACCm3DV5BWzI2rlyAXRFtLbSQtcTtlMuKKtm5zFOMingkQ==
{% endif %}
{% if test_scenario['values']['kerberos-backend'] == 'activeDirectory' %}
---
apiVersion: v1
kind: Secret
metadata:
  name: secret-operator-ad-passwords
{% endif %}
